#include "Material.h"
#include "Microfacet.h"
#include "Shape.h"
#include "Random.h"
#include "Fresnel.h"

// *** マテリアル ***

Vec3 Material::sample_f(const Vec3& wo, const intersection& p, Vec3& wi, float& pdf) const {
    // 一つのBxDFから方向をサンプリングして寄与はすべてのBxDFを考慮する
    auto f = Vec3::zero;
    auto num_bxdfs = bxdf_list.size();
    if (num_bxdfs == 0) {
        return f;
    }
    // BxDFをランダムに一つ選択
    auto bxdf_index = Random::uniform_int(0, num_bxdfs - 1);
    const auto& bxdf_main = bxdf_list[bxdf_index]; // サンプリングするBxDF
    // BxDFで方向をサンプリング
    f = bxdf_main->sample_f(wo, p, wi, pdf);
    // すべてのBxDFを考慮してBSDFとpdfを計算
    f = eval_f(wo, wi);
    pdf = eval_pdf(wo, wi);
    return f;
}

Vec3 Material::eval_f(const Vec3& wo, const Vec3& wi) const {
    // すべてのBxDFの総和を計算
    // TODO: 反射と透過の区別(内積を利用)
    //       あるいはBxDFを半球でなく全球範囲で定義する
    auto f = Vec3::zero;
    auto num_bxdfs = bxdf_list.size();
    if (num_bxdfs == 0) {
        return f;
    }
    for (const auto& bxdf : bxdf_list) {
        f += bxdf->eval_f(wo, wi);
    }
    return f;
}

float Material::eval_pdf(const Vec3& wo, const Vec3& wi) const {
    // すべてのBxDFのpdfの平均を計算
    auto num_bxdfs = bxdf_list.size();
    if (num_bxdfs == 0) {
        return 0.0f;
    }
    auto pdf = 0.0f;
    for (const auto& bxdf : bxdf_list) {
        pdf += bxdf->eval_pdf(wo, wi);
    }
    return pdf / num_bxdfs;
}


// *** 拡散反射マテリアル ***
Diffuse::Diffuse(Vec3 _albedo) 
    : Material(MaterialType::Diffuse), 
      albedo(_albedo) 
{
    // ランバートBRDFを追加
    // TODO: オレンナイヤルモデルを実装したら粗さを考慮
    add(std::make_shared<LambertianReflection>(_albedo));
}


// *** 鏡マテリアル ***
Mirror::Mirror(Vec3 _albedo)
    : Material(MaterialType::Specular),
    albedo(_albedo)
{
    auto fres = std::make_shared<FresnelConstant>(Vec3::one);
    add(std::make_shared<SpecularReflection>(albedo, fres));
}


// *** 金属マテリアル ***
Metal::Metal(Vec3 _albedo, Vec3 _fr, float _alpha)
    : Material(MaterialType::Glossy),
      albedo(_albedo),
      fr(_fr),
      alpha(_alpha)
{
    auto fres = std::make_shared<FresnelSchlick>(fr);
    if (alpha == 0) {
        add(std::make_shared<SpecularReflection>(_albedo, fres));
    }
    else {
        auto dist = std::make_shared<GGX>(alpha);
        add(std::make_shared<MicrofacetReflection>(albedo, dist, fres));
    }
}


//
//
//// *** Phongモデル ***
//// TODO: 正規化/より効率的な重点的サンプリングの実装
//Phong::Phong(Vec3 _albedo, Vec3 _Kd, Vec3 _Ks, float _shin) 
//    : Material(MaterialType::Glossy), albedo(_albedo), Kd(_Kd), Ks(_Ks), shin(_shin) {}
//
//float Phong::eval_pdf(const Vec3& wo, const Vec3& wi) const {
//    return std::max(std::abs(get_cos(wi)) * invpi, epsilon);
//}
//
//Vec3 Phong::f(const Vec3& wo, const Vec3& wi) const {
//    auto dir_spec = Vec3(-wo.get_x(), -wo.get_y(), wo.get_z()); // 正反射方向
//    Vec3 diffuse = Kd * invpi;
//    Vec3 specular = Ks * std::pow(dot(dir_spec, wi), shin) * invpi;
//    return albedo * (diffuse + specular);
//}
//
//Vec3 Phong::sample_f(const Vec3& wo, const intersection& p, Vec3& wi, float& pdf) const {
//    wi = Random::cosine_hemisphere_sample();
//    pdf = eval_pdf(wo, wi);
//    auto brdf = f(wo, wi);
//    return brdf;
//}
//
//